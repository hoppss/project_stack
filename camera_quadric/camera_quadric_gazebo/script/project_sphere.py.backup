import numpy as np
import matplotlib.pyplot as plt
from matplotlib.patches import Ellipse

# sphere
Q = np.eye(4)
Q[3, 3] = -(2.13036/2)**2
dualQ = np.linalg.inv(Q)
Twq = np.eye(4)
Twq[0, 3] = 0.446472
Twq[1, 3] = -0.484614
Twq[2, 3] = 0.5
dualQ = Twq.dot(dualQ).dot(Twq.transpose())
print "dualQ=\n", dualQ

# intrinsic, Tcw
K = np.array([[277.19135641132203, 0.0, 160.5], [0.0, 277.19135641132203, 120.5], [0.0, 0.0, 1.0]])
# normal Twc
# Twc = np.array([[0.98637,  -0.131883, -0.0983955,   -1.96194],
#                 [9.8637e-07,   0.597993,  -0.801502,   -2.98698],
#                 [  0.164544,   0.790577,   0.589842,          0],
#                 [         0,          0,          0,          1]])
Rwc = np.array([[0.589842,  -0.774386,  -0.228938],
                [0.790577,   0.611542, -0.0316886],
                [0.164544,  -0.162302,   0.972925]])
twc = np.array([-1.96194, -2.98698, 0]) + np.array([0.05, 0.05, 0.05])
# simple Twc
# Rwc = np.eye(3)
# twc = np.array([-9, 0, 0])  # + np.array([0.05, 0.05, 0.05])
# Tcw = np.eye(4)
# Tcw[:-1, :-1] = Rcw
# Tcw[:-1, 3] = tcw
# rotate camera coordinate system to get final Twc
Rx = np.array([[1, 0, 0, 0],
               [0, 0, 1, 0],
               [0, -1, 0, 0],
               [0, 0, 0, 1]])
# Rx = np.array([[1, 0, 0, 0],
#                [0, np.cos(np.pi/2), np.sin(np.pi/2), 0],
#                [0, -np.sin(np.pi/2), np.cos(np.pi/2), 0],
#                [0, 0, 0, 1]])
Ry = np.array([[0, 0, 1, 0],
               [0, 1, 0, 0],
               [-1, 0, 0, 0],
               [0, 0, 0, 1]])
# Ry = np.array([[np.cos(np.pi/2), 0, np.sin(np.pi/2), 0],
#                [0, 1, 0, 0],
#                [-np.sin(np.pi/2), 0, np.cos(np.pi/2), 0],
#                [0, 0, 0, 1]])
Twc = np.eye(4)
Twc[:-1, :-1] = Rwc
Twc[:-1, 3] = twc
Twc = Twc.dot(Rx).dot(Ry)
Tcw = np.linalg.inv(Twc)
print "Tcw=\n", Tcw

# project sphere
P = K.dot(Tcw[:-1, :])
dualC = P.dot(dualQ).dot(P.transpose())
C = np.linalg.inv(dualC)
print "dualC=\n", dualC
print "C=\n", C

# draw conic
x = np.arange(0, 320, 0.1)
y = np.arange(0, 240, 0.1)
x, y = np.meshgrid(x, y)
plt.contour(x, y, C[0,0]*x**2 + 2*C[0,1]*x*y + C[1,1]*y**2 + 2*C[0,2]*x + 2*C[1,2]*y + C[2,2], [0])
plt.axis('scaled')
plt.xlim([0, 320])
plt.ylim([0, 240])
plt.show()
