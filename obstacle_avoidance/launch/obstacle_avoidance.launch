<launch>
    <arg name="base_model" default="turtlebot3" />
    <arg name="cmd_vel_topic" default="/cmd_vel"/>
    <arg name="odom_topic" default="/odom"/>
    <arg name="use_noise" default="false"/>

    <node pkg="obstacle_avoidance" type="obstacle_avoidance_server_node" name="obstacle_avoidance_server" output="screen" >
<!--        launch-prefix="xterm -e gdb -ex gdb &#45;&#45;args ">-->
        <param name="is_noise" value="$(arg use_noise)"/>
        <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS"/>
        <rosparam file="$(find obstacle_avoidance)/param/$(arg base_model)/move_base_params.yaml" command="load"/>
        <rosparam file="$(find obstacle_avoidance)/param/$(arg base_model)/costmap_common_params.yaml" command="load" ns="local_costmap"/>
        <rosparam file="$(find obstacle_avoidance)/param/$(arg base_model)/local_costmap_params.yaml" command="load"/>
        <rosparam file="$(find obstacle_avoidance)/param/$(arg base_model)/dwa_local_planner_params.yaml" command="load"/>
        <rosparam file="$(find obstacle_avoidance)/param/$(arg base_model)/rolling_window_params.yaml" command="load"/>

        <remap from="cmd_vel" to="$(arg cmd_vel_topic)" />
    </node>

    <node pkg="obstacle_avoidance" type="obstacle_avoidance_client_node" name="obstacle_avoidance_client" output="screen" >
        <param name="global_frame" value="odom" />
        <param name="base_frame" value="base_link" />
        <param name="use_file" value="true" />
        <param name="use_base_goal" value="true" />
        <param name="filename" value="$(find obstacle_avoidance)/param/nav_path.txt" />
    </node>
</launch>